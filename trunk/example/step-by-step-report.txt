Hello1 Project Step-by-Step Creation
====================================
01. Eclipse: New: Project: Dinamic Web Project: "hello1"
02. hello1: Spring Tools: Add Spring Nature
03. hello1: New: Package: "com.hello"
04. com.hello: New: Package: "com.hello.dao"
05. com.hello: New: Package: "com.hello.entity"
06. com.hello: New: Class: "CatApp" - main class to test the others
07. com.hello.dao: New: Class: "CatDAO" - to access the Table CATEGORIES
08. com.hello.entity: New Class: "CatEntity"
09. copy the following to the "hello1\WebContent\WEB-INFO\lib" folder:
	antlr-2.7.7.jar
	dom4j-1.6.1.jar
	hibernate-commons-annotations-4.0.1.Final.jar
	hibernate-core-4.1.7.Final.jar
	hibernate-jpa-2.0-api-1.0.1.Final.jar
	javassist-3.15.0-GA.jar
	jboss-logging-3.1.0.GA.jar
	jboss-transaction-api_1.1_spec-1.0.0.Final.jar
	mysql-connector-java-5.1.6.jar
	slf4j-api-1.6.1.jar
10. hello1: Properties: Java Build Path: Libraries: Add External JARs...: choose the above libraries
11. src: New: Other: XML: XML File: "hibernate.cfg.xml"
12. fill hibernate.cfg.xml with the following code:
---------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="hibernate.connection.url">
            jdbc:mysql://localhost/restaurant
        </property>
        <property name="hibernate.connection.username">food</property>
        <property name="hibernate.connection.password">food</property>
        <property name="hibernate.connection.autocommit">true</property>
        <property name="show_sql">true</property>
        <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <mapping class="com.hello.entity.CatEntity"/>
    </session-factory>
</hibernate-configuration>
---------------------
13. src: New: Other: General: File: "log4j.properties" - to add Logger
14. fill log4j.properties with the following code:
---------------------
### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n
### set log levels - for more verbose logging change 'info' to 'debug' ###
log4j.rootLogger=debug, stdout
log4j.logger.org.hibernate=info
#log4j.logger.org.hibernate=debug
### log HQL query parser activity
#log4j.logger.org.hibernate.hql.ast.AST=debug
### log just the SQL
log4j.logger.org.hibernate.SQL=debug
### log JDBC bind parameters ###
log4j.logger.org.hibernate.type=info
### log schema export/update ###
log4j.logger.org.hibernate.tool.hbm2ddl=info
### log HQL parse trees
#log4j.logger.org.hibernate.hql=debug
### log cache activity ###
log4j.logger.org.hibernate.cache=info
### log transaction activity
#log4j.logger.org.hibernate.transaction=debug
### log JDBC resource acquisition
#log4j.logger.org.hibernate.jdbc=debug
### enable the following line if you want to track down connection ###
### leakages when using DriverManagerConnectionProvider ###
#log4j.logger.org.hibernate.connection.DriverManagerConnectionProvider=trace
---------------------
15. com.hello: New: Class: "HibernateUtil" - to create Session Fabric
16. fill HibernateUtil.java with the following code:
---------------------
package com.hello;

import org.hibernate.*;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.*;


public class HibernateUtil {

	private static SessionFactory sessionFactory;
	private static ServiceRegistry serviceRegistry;
	
	
	static {
	    Configuration configuration = new Configuration();
	    configuration.configure();
	    serviceRegistry = new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();        
	    sessionFactory = configuration.buildSessionFactory(serviceRegistry);
	}

    public static Session getSession()
            throws HibernateException {
        return sessionFactory.openSession();
    }
}
---------------------
17. fill CatEntity.java with the following code
---------------------
package com.hello.entity;

import javax.persistence.*;

@Entity
@Table(name="CATEGORIES")
public class CatEntity {
	@Id
	@Column(name="CAT_ID")
	@GeneratedValue (strategy = GenerationType.AUTO)
	private int catId;
	
	@Column(name="CAT_NAME", length=30)
	private String catName;

	public int getCatId() {
		return catId;
	}

	public void setCatId(int catId) {
		this.catId = catId;
	}

	public String getCatName() {
		return catName;
	}

	public void setCatName(String catName) {
		this.catName = catName;
	}
}
---------------------
18. fill CatApp.java with the following code
---------------------
package com.hello;

import java.util.List;

import com.hello.entity.*;
import com.hello.HibernateUtil;

import org.hibernate.Query;
import org.hibernate.Session;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CatApp {

	final static Logger logger = LoggerFactory.getLogger(CatApp.class);
	
	
	public static void main(String[] arg) {
        Session session = HibernateUtil.getSession();  

        session.beginTransaction();        
        Query q = session.createQuery("from CatEntity"); //not "from CATEGORIES"!!!!!
        @SuppressWarnings("unchecked")
		List<CatEntity> list = q.list();
        
        for (CatEntity c : list) {
			System.out.println(c.getCatId()+": "+c.getCatName());
		}
        
        session.flush();
        session.close();		
	}
}
---------------------
19. run MySQL server
20. run "CreateDB.bat"
21. run CatApp as a Java Application - we will see CATEGORIES Table content

22. src: New: Package: "com.hello.model"
23. com.hello.model: New: Class: CatModel - this is our model
24. fill CatModel.java the following code
---------------------
package com.hello.model;

public class CatModel {
	private String catName;
	
	public CatModel(String name) {
		this.catName = name;
	}

	public String getCatName() {
		return catName;
	}

	public void setCatName(String catName) {
		this.catName = catName;
	}

	@Override
	public String toString() {
		return catName;
	}	
}
---------------------
25. fill CatDAO.java the following code
---------------------
package com.hello.dao;

import java.util.List;
import java.util.ArrayList;

import com.hello.entity.*;
import com.hello.model.*;
import com.hello.HibernateUtil;

import org.hibernate.Query;
import org.hibernate.Session;


public class CatDAO {
	
	private Query queryResult;
	
	public CatDAO() {
        Session session = HibernateUtil.getSession();  

        session.beginTransaction();        
        queryResult = session.createQuery("from CatEntity");
        session.flush();
//        session.close(); //if uncomment, an error occurs. why???
	}

	public ArrayList<CatModel> getModel() {
        @SuppressWarnings("unchecked")
		List<CatEntity> entityList = queryResult.list();
        CatModel model = null;
        ArrayList<CatModel> modelList = new ArrayList<CatModel>();
        for (CatEntity entity : entityList) {
        	model = new CatModel(entity.getCatName());
        	modelList.add(model);
        }
        return modelList;
	}
}
---------------------
26. fill CatApp.java the following code
	(replace existing code with the following one)
---------------------
package com.hello;

import java.util.ArrayList;

import com.hello.dao.CatDAO;
import com.hello.model.CatModel;

public class CatApp {

	public static void main(String[] arg) {
		CatDAO catDAO = new CatDAO();
		ArrayList<CatModel> catList = catDAO.getModel();
		catList.remove(0); //remove category "Вне категории"
		
        System.out.println("Содержимое таблицы \"CATEGORIES\":");
		for (CatModel c : catList) {
			System.out.println(c);
		}
	}
}
---------------------
27. run CatApp as a Java Application - we will see CATEGORIES Table content

28. src: New: Package: "com.hello.service"
29. com.hello1.service: New: Class: "CatService"
30. fill CatService.java the following code
---------------------
package com.hello.service;

import java.util.ArrayList;

import com.hello.dao.CatDAO;
import com.hello.model.CatModel;

public class CatService {
	public ArrayList<String> getCategoryList() {
		CatDAO catDAO = new CatDAO();
		ArrayList<CatModel> mList = catDAO.getModel();
		mList.remove(0); //remove category "Вне категории"
		ArrayList<String> sList = new ArrayList<String>();
		for (CatModel m : mList) {
			sList.add(m.getCatName());
		}
		return sList;
	}
}
---------------------
31. fill CatApp.java the following code
	(replace existing code with the following one)
---------------------
package com.hello;

import java.util.ArrayList;

import com.hello.service.CatService;

public class CatApp {

	public static void main(String[] arg) {
		CatService service = new CatService();
		ArrayList<String> sList = service.getCategoryList();
		
        System.out.println("Содержимое таблицы \"CATEGORIES\":");
		for (String s : sList) {
			System.out.println(s);
		}
	}
}
---------------------
32. run CatApp as a Java Application - we will see CATEGORIES Table content
33. Move HibernateUtil.java into com.hello1.dao package (it should be there!)
	and remove the import statement "import com.hello.HibernateUtil;" from 
	CatDAO.java (this should be done by Eclipse automaticaly)

34. hello1/WebContent/WEB-INF: New: Other: XML: XML File: web.xml
35. fill web.xml the following code
---------------------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <servlet>
        <servlet-name>cat-dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>cat-dispatcher</servlet-name>
        <url-pattern>*.htm</url-pattern>
    </servlet-mapping>
	
	<welcome-file-list>
        <welcome-file>start.jsp</welcome-file>
    </welcome-file-list>
</web-app>
---------------------
NOTE:
	Dispatcher servlet configuration file name should be "cat-dispatcher-servlet.xml"
36. hello1/WebContent/WEB-INF: New: Other: XML: XML File: "cat-dispatcher-servlet.xml"
37. fill cat-dispatcher-servlet.xml the following code
---------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
        <property name="prefix">
            <value>/WEB-INF/jsp/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>
    
    <bean name="/categories.htm" class="com.hello.controller.CatController" >
    </bean>

    
</beans>
---------------------
38. src: New: Package: "com.hello.controller"
39. com.hello.controller: New: Class: "CatController"
40. fill CatController.java with the following code
---------------------
package com.hello.controller;

import java.util.ArrayList;

import com.hello.service.CatService; 

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

public class CatController extends AbstractController {
	
	ArrayList<String> categoryList;
	
	public CatController() {
		CatService service = new CatService();
		this.categoryList = service.getCategoryList();		
	}

	@Override
	protected ModelAndView handleRequestInternal(HttpServletRequest arg0,
			HttpServletResponse arg1) throws Exception {
		return new ModelAndView("helloPage","helloMessage", categoryList);
	}
}
---------------------
41. add libraries org.springframework.* and spring-webmvc-...
42. hello1/WebContent/WEB-INF: New: Folder: "jsp"
43. hello1/WebContent/WEB-INF/jsp: New: JSP File: "categoryPage.jsp"
44. fill categoryPage.jsp with the following code
---------------------
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Ресторан</title>
</head>
<body>
У нас сегодня на обед:<br>

${categories}

</body>
</html>
---------------------

45. hello1/WebContent: New: JSP File: "start.jsp"

46. fill start.jsp with the following code
---------------------
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<% response.sendRedirect("categories.htm"); %>
---------------------

47. hello1: Run as: Run on Server - you will Page with the category list at the browser

48. hello1: Export: WAR File: "hello1.war"

49. Place hello1.war into %tomcat_home%\webapps folder
50. run Tomcat (%tomcat_home%\bin\startup.bat)
51. run web-browser and enter URL: localhost:8080/hello1
52. redirect to the localhost:8080/hello1/category.htm will be done and you will see
	Page with category list


